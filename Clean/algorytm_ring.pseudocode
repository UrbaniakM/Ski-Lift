//--Requests go left to right
//--Tokens go right to left

main():
	var rightNode, leftNode, Me;
	var MyTokens, TokensAwaited, TokensRequested;
	var timeoutManager;
	var isRequested, isAwaiting;
	LOOP:
		if Me.ready():
			if Me.getWeight() <= MyTokens:
				isAwaiting=false;
				MyTokens-=Me.getWeight();
				Me.enterLift();
			elif !isAwaiting:
				isAwaiting=true;
				timeoutManager.reset();
				var diffrence = MyTokens-Me.getWeight();
				TokensAwaited+=diffrence;
				rightNode.sendRequest(diffrence);
		if isRequested && (!isAwaiting || timeoutManager.done()):
			timeoutManager.reset();
			if TokensRequested <= MyTokens
				MyTokens-=TokensRequested;
				leftNode.sendTokens(TokensRequested);
				TokensRequested=0;
			else:
				TokensRequested-=MyTokens;
				leftNode.sendTokens(MyTokens);
				MyTokens=0;
				
		if leftNode.isRequest():
			var req = leftNode.popRequest();
			if !isAwaiting:
				if req.val <= MyTokens
					MyTokens-=req.val;
					leftNode.sendTokens(req.val);
				else:
					isRequested=true;
					var diffrence = MyTokens-req.val;
					TokensRequested+=diffrence;
					TokensAwaited+=diffrence;
					rightNode.sendRequest(diffrence);
		if leftNode.isRelease():
			var releasedTokens = leftNode.popReleasedTokens();
			TokensRequested=max(0, TokensRequested-releasedTokens)
			
		if rightNode.areTokens():
			var tokens=rightNode.recvTokens();
			TokensAwaited=max(0, TokensAwaited-tokens)
			MyTokens+=tokens;
		if Me.isDone():
			MyTokens+=Me.getWeight();
			
			
			
			
			